/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.teacher;

import edu.gti.asd.ariel.recordkeeping.model.Course;
import edu.gti.asd.ariel.recordkeeping.model.IComboElement;
import edu.gti.asd.ariel.recordkeeping.model.Report;
import edu.gti.asd.ariel.recordkeeping.model.Subject;
import edu.gti.asd.ariel.recordkeeping.model.SubjectStudentGrade;
import edu.gti.asd.ariel.recordkeeping.model.User;
import edu.gti.asd.ariel.recordkeeping.service.CourseService;
import edu.gti.asd.ariel.recordkeeping.service.GenerateReportService;
import edu.gti.asd.ariel.recordkeeping.service.GenerateReportServicePDFImpl;
import edu.gti.asd.ariel.recordkeeping.service.GradeService;
import edu.gti.asd.ariel.recordkeeping.service.StudentService;
import edu.gti.asd.ariel.recordkeeping.service.SubjectService;
import edu.gti.asd.ariel.recordkeeping.utils.ContextManager;
import java.io.File;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ariel
 */
public class GTIGenerateTeacherReportsForm extends javax.swing.JFrame {
    
    
    private static final String DATE_FORMAT = "YYYY-MM-DD";
    private static final String REPORT_STUDENTS_BY_COURSE_FILENAME = "STUDENTS_BY_COURSE_YYYY-MM-DD.pdf";
    private static final String REPORT_GRADES_PER_COURSE_FILENAME = "GRADES_PER_COURSE_YYYY-MM-DD.pdf";
    private static final String REPORT_STUDENT_FILENAME = "STUDENT_REPORT_{}_YYYY-MM-DD.pdf";
    
    private ContextManager contextManager;
    private User user;
    
    private CourseService courseService;
    private SubjectService subjectService;
    private StudentService studentService;
    private GradeService gradeService;
    private GenerateReportService generateReportService;
    
    private List<SubjectStudentGrade> subjectStudenGrades;
    private List<Course> coursesByTeacher;
    private List<Subject> subjectsByCourseAndTeacher;
    
    private IComboElement selectedCourse;
    private IComboElement selectedSubject;

    /**
     * Creates new form GTIRegisterStudentInCourseForm
     */
    public GTIGenerateTeacherReportsForm(ContextManager contextManager, User user) {
        initComponents();
        this.contextManager = contextManager;
        this.user = user;
        setUserLabel();
        initBeans();
        fetchDataFromDB();
        populateCoursesCombo();
        populateReportsCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxSubject = new javax.swing.JComboBox<>();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        jButtonGenerate = new javax.swing.JButton();
        jComboBoxReport = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelUser = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxStudent = new javax.swing.JComboBox<>();
        jTextFieldFilename = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldDirectory = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Select Course:");

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel3.setText("Reports Generation");

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Subject:");

        jComboBoxSubject.setEnabled(false);
        jComboBoxSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSubjectActionPerformed(evt);
            }
        });

        jComboBoxCourse.setEnabled(false);
        jComboBoxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCourseActionPerformed(evt);
            }
        });

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jComboBoxReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxReportActionPerformed(evt);
            }
        });

        jLabel2.setText("Select report:");

        jLabel5.setText("Filename:");

        jLabelUser.setText("User:");

        jLabel6.setText("Select Student:");

        jComboBoxStudent.setEnabled(false);

        jLabel7.setText("Directory: ");

        jTextFieldDirectory.setEnabled(false);
        jTextFieldDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldDirectoryMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonGenerate)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonExit))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                                    .addComponent(jComboBoxStudent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxReport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxCourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxSubject, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldFilename)))
                            .addComponent(jLabelUser, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel3)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabelUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonGenerate))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jComboBoxSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSubjectActionPerformed
        selectedSubject = (IComboElement)jComboBoxSubject.getSelectedItem();
        
        if (selectedSubject != null && !Integer.valueOf(-1).equals(selectedSubject.getComboElementId())) {

            // TODO: Get grades
            Integer subjectId = selectedSubject.getComboElementId();
            
            subjectStudenGrades = gradeService.getGradesForStudentsInCourse(selectedCourse.getComboElementId(), subjectId);

        }
    }//GEN-LAST:event_jComboBoxSubjectActionPerformed

    private void jComboBoxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCourseActionPerformed
        selectedCourse = (IComboElement)jComboBoxCourse.getSelectedItem();
        if (selectedCourse != null && !selectedCourse.getComboElementId().equals(-1)) {
            subjectsByCourseAndTeacher = subjectService.getSubjectsByCourseAndTeacher(selectedCourse.getComboElementId(), user.getTeacherId());
            populateSubjectsCombo();
        }
        
    }//GEN-LAST:event_jComboBoxCourseActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        // Validations
        Report reportOption = (Report)jComboBoxReport.getSelectedItem();
        
        IComboElement student = (IComboElement)jComboBoxStudent.getSelectedItem();
        IComboElement course = (IComboElement)jComboBoxCourse.getSelectedItem();
        IComboElement subject = (IComboElement)jComboBoxSubject.getSelectedItem();
        
        String filename = jTextFieldFilename.getText().trim();
        String directory = jTextFieldDirectory.getText().trim();
        String fullFileName = null;
        switch (reportOption.getReportId()) {
            case -1:
                JOptionPane.showMessageDialog(this, "Must select a report to generate!");
                break;
            case 1:
                if (student == null || student.getComboElementId().equals(-1)) {
                    JOptionPane.showMessageDialog(this, "Must select a student for this report!");
                    return;
                }
                fullFileName = checkFileNameAndDir(filename, directory);
                if (fullFileName == null) return;
                generateReportService.studentReport(fullFileName, student.getComboElementId());
                JOptionPane.showMessageDialog(this, "Student report generated!");
                break;
            case 2:
                if (course == null || course.getComboElementId().equals(-1)) {
                    JOptionPane.showMessageDialog(this, "Must select a course for this report!");
                    return;
                }
                fullFileName = checkFileNameAndDir(filename, directory);
                if (fullFileName == null) return;
                generateReportService.listOfStudentsByCourse(fullFileName, course.getComboElementId());
                JOptionPane.showMessageDialog(this, "Students by Course report generated!");
                break;
            case 3:
                if (course == null || course.getComboElementId().equals(-1)) {
                    JOptionPane.showMessageDialog(this, "Must select a course for this report!");
                    return;
                }
                if (subject == null || subject.getComboElementId().equals(-1)) {
                    JOptionPane.showMessageDialog(this, "Must select a subject for this report!");
                    return;
                }
                fullFileName = checkFileNameAndDir(filename, directory);
                if (fullFileName == null) return;
                generateReportService.gradesByCourseAndSubject(
                        fullFileName,
                        course.getComboElementId(), 
                        subject.getComboElementId()
                );
                JOptionPane.showMessageDialog(this, "Grades by course and subject report generated!");
                break;
            default:
                throw new AssertionError();
        }
        
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    private void jComboBoxReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxReportActionPerformed
        Report reportOption = (Report)jComboBoxReport.getSelectedItem();
        
        switch (reportOption.getReportId()) {
            case -1:
                disableAllCombos();
                break;
            case 1:
                enableStudentCombo();
                jTextFieldFilename.setText(REPORT_STUDENT_FILENAME.replace(DATE_FORMAT, getYYYYMMDD()));
                break;
            case 2:
                enableCourseCombo();
                jTextFieldFilename.setText(REPORT_STUDENTS_BY_COURSE_FILENAME.replace(DATE_FORMAT, getYYYYMMDD()));
                break;
            case 3:
                enableCourseAndSubjectCombo();
                jTextFieldFilename.setText(REPORT_GRADES_PER_COURSE_FILENAME.replace(DATE_FORMAT, getYYYYMMDD()));
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_jComboBoxReportActionPerformed

    private void jTextFieldDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldDirectoryMouseClicked
        DirectoryChooserDialog directoryChooser = new DirectoryChooserDialog(this, jTextFieldDirectory, true);
        directoryChooser.setVisible(true);
        
    }//GEN-LAST:event_jTextFieldDirectoryMouseClicked

    private void populateSubjectsCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxSubject.getModel();
        cbModel.removeAllElements();
        cbModel.addElement(new Subject(-1, "Select a subject...", ""));
        cbModel.addAll(subjectsByCourseAndTeacher);                
        
    }
    
    private void initBeans() {
        this.courseService =  contextManager.getBean(CourseService.class);
        this.studentService = contextManager.getBean(StudentService.class);
        this.subjectService = contextManager.getBean(SubjectService.class);
        this.gradeService = contextManager.getBean(GradeService.class);
        this.generateReportService = contextManager.getBean(GenerateReportServicePDFImpl.class);
    }

    private void fetchDataFromDB() {
        this.coursesByTeacher = courseService.getCoursesByTeacherId(user.getTeacherId());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JComboBox<IComboElement> jComboBoxCourse;
    private javax.swing.JComboBox<IComboElement> jComboBoxReport;
    private javax.swing.JComboBox<IComboElement> jComboBoxStudent;
    private javax.swing.JComboBox<IComboElement> jComboBoxSubject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelUser;
    private javax.swing.JTextField jTextFieldDirectory;
    private javax.swing.JTextField jTextFieldFilename;
    // End of variables declaration//GEN-END:variables

    private void emptySubjectsCombo() {
        jComboBoxSubject.removeAllItems();
        jComboBoxSubject.addItem(new Subject(-1, "Select a subject...", ""));
        
    }

    private void populateCoursesCombo() {
        jComboBoxCourse.addItem(new Course(-1, "Select one course..."));
        for (Course course : coursesByTeacher) {
            jComboBoxCourse.addItem(course);
        }
        
    }

    private void populateReportsCombo() {
        jComboBoxReport.addItem(new Report(-1, "Select an option"));
        jComboBoxReport.addItem(new Report(1, "Student report"));
        jComboBoxReport.addItem(new Report(2, "List of Students by Course"));
        jComboBoxReport.addItem(new Report(3, "Grades per course and subject"));
        
    }

    private void setUserLabel() {
        jLabelUser.setText("User: " + user.getUsername());
    }

    private void disableAllCombos() {
        jComboBoxCourse.setEnabled(false);
        jComboBoxStudent.setEnabled(false);
        jComboBoxSubject.setEnabled(false);
    }

    private void enableStudentCombo() {
        jComboBoxStudent.setEnabled(true);
        
        jComboBoxCourse.setEnabled(false);
        jComboBoxSubject.setEnabled(false);
    }

    private void enableCourseCombo() {
        jComboBoxCourse.setEnabled(true);
        
        jComboBoxStudent.setEnabled(false);
        jComboBoxSubject.setEnabled(false);
    }

    private void enableCourseAndSubjectCombo() {
        jComboBoxCourse.setEnabled(true);
        jComboBoxSubject.setEnabled(true);
        
        jComboBoxStudent.setEnabled(false);
    }
    
    private String getYYYYMMDD() {
        LocalDateTime ldt = LocalDateTime.now();
        return DateTimeFormatter.ofPattern("yyyy-MM-dd", Locale.ENGLISH).format(ldt);
    }

    private String checkFileNameAndDir(String filename, String directory) {
        if (filename.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Must enter a filename");
            return null;
        } else if (directory.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Must select a directory");
            return null;
        }
        
        return directory + File.separator + filename;
        
    }


}
