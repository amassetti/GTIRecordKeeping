/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.admin;

import edu.gti.asd.ariel.recordkeeping.exceptions.RecordAlreadyExistsException;
import edu.gti.asd.ariel.recordkeeping.exceptions.ValidationException;
import edu.gti.asd.ariel.recordkeeping.model.Course;
import edu.gti.asd.ariel.recordkeeping.model.CourseType;
import edu.gti.asd.ariel.recordkeeping.model.Department;
import edu.gti.asd.ariel.recordkeeping.model.IComboElement;
import edu.gti.asd.ariel.recordkeeping.service.DepartmentService;
import edu.gti.asd.ariel.recordkeeping.service.CourseService;
import edu.gti.asd.ariel.recordkeeping.service.CourseTypeService;
import edu.gti.asd.ariel.recordkeeping.utils.ContextManager;
import edu.gti.asd.ariel.recordkeeping.utils.FieldsUtils;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ariel
 */
public class GTIManageCoursesForm extends javax.swing.JFrame {
    private Logger log = Logger.getLogger(GTIManageCoursesForm.class.getName());
    
    private ContextManager contextManager;
    private CourseService courseService;
    private DepartmentService departmentService;
    private CourseTypeService courseTypeService;
    
    // Data
    private List<Course> courses;
    private List<Department> departments;
    private List<CourseType> courseTypes;
    private List<Integer> certifications;
    
    /**
     * Creates new form GTIManageCoursesForm
     */
    public GTIManageCoursesForm(ContextManager contextManager) {
        initComponents();
        this.contextManager = contextManager;
        initBeans();
        populateCoursesData();
        populateCombosData();
        updateJTable();
        updateDepartmentsCombo();
        updateCourseTypesCombo();
        updateCertificationsCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCourses = new javax.swing.JTable();
        jComboBoxDepartment = new javax.swing.JComboBox<>();
        jComboBoxCourseType = new javax.swing.JComboBox<>();
        jTextFieldCourseCode = new javax.swing.JTextField();
        jTextFieldName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jComboBoxCertification = new javax.swing.JComboBox<>();
        jButtonAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldFilter = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Courses");
        setResizable(false);

        jTableCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Department", "Type", "Code", "Name", "Description", "Certification"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCourses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCoursesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCourses);

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setRows(5);
        jScrollPane2.setViewportView(jTextAreaDescription);

        jButtonAdd.setText("Add >>");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel1.setText("Courses");

        jTextFieldID.setEditable(false);

        jButtonUpdate.setText("Update");
        jButtonUpdate.setEnabled(false);
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jLabel2.setText("ID");

        jLabel3.setText("Department");

        jLabel4.setText("Course Type");

        jLabel5.setText("Course Code");

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel6.setText("Filter:");

        jTextFieldFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldFilterKeyTyped(evt);
            }
        });

        jLabel7.setText("Course Name");

        jLabel8.setText("Description");

        jLabel9.setText("QQI Level");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(496, 496, 496)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBoxDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBoxCourseType, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAdd))
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxCertification, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDelete)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(39, 39, 39))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBoxCourseType, jComboBoxDepartment, jScrollPane2, jTextFieldCourseCode, jTextFieldName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDelete, jButtonUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCourseType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAdd))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCertification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonUpdate)
                            .addComponent(jButtonDelete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(106, 106, 106)
                .addComponent(jButtonExit)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        
        // Values retrieveal and Validations
        Integer departmentId = FieldsUtils.getMandatoryIdFromCombo(this, jComboBoxDepartment, "department");
        if (departmentId.equals(-1)) return;
        
        Integer courseTypeId = FieldsUtils.getMandatoryIdFromCombo(this, jComboBoxCourseType, "course type");
        if (courseTypeId.equals(-1)) return;

        String courseCode = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldCourseCode, "course code");
        if (courseCode.isEmpty()) return;
        
        String courseName = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldName, "course name");
        if (courseName.isEmpty()) return;
        
        String courseDescription = FieldsUtils.getMandatoryValueFromTextArea(this, jTextAreaDescription, "course description");
        if (courseDescription.isEmpty()) return;
        
        Integer certification = Integer.parseInt(jComboBoxCertification.getSelectedItem().toString());

        // Model Object cration
        Course course = new Course();        
        course.setDepartmentId(departmentId);
        course.setCourseTypeId(courseTypeId);
        course.setCode(courseCode);
        course.setName(courseName);
        course.setDescription(courseDescription);
        course.setCertification(certification);
        
        // Service layer Insert
        try {
            courseService.insertCourse(course);
        } catch (ValidationException vEx) {
            JOptionPane.showMessageDialog(this, vEx.getMessage());
            return;
        } 
        
        // Cleanup
        cleanInputs();
        populateCoursesData();
        updateJTable();
        
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableCoursesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCoursesMouseClicked
        // Double click
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            DefaultTableModel tableModel = (DefaultTableModel)jTableCourses.getModel();
            int index = jTableCourses.getSelectedRow();
            
            Course course = courses.get(index);
            
            // Set fields
            jTextFieldID.setText(course.getCourseId().toString());
            jTextAreaDescription.setText(course.getDescription());
            jTextFieldCourseCode.setText(course.getCode());
            jTextFieldName.setText(course.getName());
            
            Optional<Department> department = departments.stream().filter(d -> d.getDepartmentId().equals(course.getDepartmentId())).findFirst();
            jComboBoxDepartment.setSelectedItem(department.get());
            
            Optional<CourseType> courseType = courseTypes.stream().filter(ct -> ct.getCourseTypeId().equals(course.getCourseTypeId())).findFirst();
            jComboBoxCourseType.setSelectedItem(courseType.get());
            
            Optional<Integer> certification = certifications.stream().filter(ct -> ct.equals(course.getCertification())).findFirst();
            jComboBoxCertification.setSelectedItem(certification.get());
            
            setEditDeleteMode();
            
        }
    }//GEN-LAST:event_jTableCoursesMouseClicked

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        Course course = new Course();
        
        Department department = (Department)jComboBoxDepartment.getSelectedItem();
        CourseType courseType = (CourseType)jComboBoxCourseType.getSelectedItem();
        
        Integer courseId = Integer.parseInt(jTextFieldID.getText());
        Integer departmentId = department.getDepartmentId();
        Integer courseTypeId = courseType.getCourseTypeId();
        String courseCode = jTextFieldCourseCode.getText();
        String courseName = jTextFieldName.getText();
        String courseDescription = jTextAreaDescription.getText();
        Integer certification = Integer.parseInt(jComboBoxCertification.getSelectedItem().toString());
        
        // TODO Validations
        course.setCourseId(courseId);
        course.setDepartmentId(departmentId);
        course.setCourseTypeId(courseTypeId);
        course.setCode(courseCode);
        course.setName(courseName);
        course.setDescription(courseDescription);
        course.setCertification(certification);
        
        courseService.updateCourse(course);
        
        populateCoursesData();
        updateJTable();
        cleanInputs();
        setAddMode();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        Integer courseId = Integer.parseInt(jTextFieldID.getText());
        String courseName = jTextFieldName.getText();
        
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete course " + courseName, "Delete Course", 0);
       
        if (option == JOptionPane.YES_OPTION) {
            courseService.deleteCourse(courseId);
            populateCoursesData();
            updateJTable();
            cleanInputs();
            setAddMode();
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTextFieldFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldFilterKeyTyped
        String filter = jTextFieldFilter.getText().trim();
        
        if (filter.length() > 2) {
            courses = courseService.searchByCourseName(filter);
            updateJTable();
        } else if (filter.length() == 0) {
            courses = courseService.getAllCourses();
            updateJTable();
        }
        
        
    }//GEN-LAST:event_jTextFieldFilterKeyTyped

    private void cleanInputs() {
        jTextFieldID.setText("");
        jTextFieldCourseCode.setText("");
        jTextFieldName.setText("");
        jTextAreaDescription.setText("");
        jComboBoxCertification.setSelectedIndex(0);
        jComboBoxCourseType.setSelectedIndex(0);
        jComboBoxDepartment.setSelectedIndex(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<Integer> jComboBoxCertification;
    private javax.swing.JComboBox<IComboElement> jComboBoxCourseType;
    private javax.swing.JComboBox<IComboElement> jComboBoxDepartment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCourses;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldCourseCode;
    private javax.swing.JTextField jTextFieldFilter;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables

    private void initBeans() {
        this.courseService = contextManager.getBean(CourseService.class);
        this.departmentService = contextManager.getBean(DepartmentService.class);
        this.courseTypeService = contextManager.getBean(CourseTypeService.class);
    }

    private void populateCoursesData() {
        log.info("Getting courses from db...");
        courses = courseService.getAllCourses();       
    }
    
    private void populateCombosData() {
        log.info("Getting departments from db...");
        departments = departmentService.getDepartments();
        
        log.info("Getting course types from db...");
        courseTypes = courseTypeService.getCourseTypes();
        
        certifications = Arrays.asList(
                Integer.valueOf(5),
                Integer.valueOf(6)
        );
    }

    private void updateJTable() {
        log.info("Updating JTable with data " + courses);
        DefaultTableModel tableModel = (DefaultTableModel) jTableCourses.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        // Populate table
        for (Course course : courses) {
            Vector row = new Vector();
            row.add(course.getCourseId());
            row.add(course.getDepartmentName());
            row.add(course.getCourseTypeName());
            row.add(course.getCode());
            row.add(course.getName());
            row.add(course.getDescription());
            row.add(course.getCertification());
            tableModel.addRow(row);
        }
        
    }

    private void updateDepartmentsCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxDepartment.getModel();
        cbModel.addElement(new Department("Select one...", -1));
        cbModel.addAll(departments);
    }

    private void updateCourseTypesCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxCourseType.getModel();
        cbModel.addElement(new CourseType(-1, "Select one..."));
        cbModel.addAll(courseTypes);
    }
    
    private void updateCertificationsCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxCertification.getModel();
        cbModel.addAll(certifications);
        jComboBoxCertification.setSelectedIndex(0);
    }

    private void setEditDeleteMode() {
        jButtonUpdate.setEnabled(true);
        jButtonDelete.setEnabled(true);
        jButtonAdd.setEnabled(false);
    }
    
    private void setAddMode() {
        jButtonUpdate.setEnabled(false);
        jButtonDelete.setEnabled(false);
        jButtonAdd.setEnabled(true);
    }
    
}
