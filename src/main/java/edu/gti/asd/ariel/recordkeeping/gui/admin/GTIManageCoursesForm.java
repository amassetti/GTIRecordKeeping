/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.admin;

import edu.gti.asd.ariel.recordkeeping.model.Course;
import edu.gti.asd.ariel.recordkeeping.model.CourseType;
import edu.gti.asd.ariel.recordkeeping.model.Department;
import edu.gti.asd.ariel.recordkeeping.service.DepartmentService;
import edu.gti.asd.ariel.recordkeeping.service.DepartmentServiceImpl;
import edu.gti.asd.ariel.recordkeeping.service.CourseService;
import edu.gti.asd.ariel.recordkeeping.service.CourseServiceImpl;
import edu.gti.asd.ariel.recordkeeping.service.CourseTypeService;
import edu.gti.asd.ariel.recordkeeping.service.CourseTypeServiceImpl;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author ariel
 */
public class GTIManageCoursesForm extends javax.swing.JFrame {
    private Logger log = Logger.getLogger(GTIManageCoursesForm.class.getName());
    
    private ClassPathXmlApplicationContext ctx;
    private CourseService courseService;
    private DepartmentService departmentService;
    private CourseTypeService courseTypeService;
    
    // Data
    private List<Course> courses;
    private List<Department> departments;
    private List<CourseType> courseTypes;
    private List<Integer> certifications;
    
    /**
     * Creates new form GTIManageCoursesForm
     */
    public GTIManageCoursesForm(ClassPathXmlApplicationContext ctx) {
        initComponents();
        this.ctx = ctx;
        initBeans();
        populateCoursesData();
        populateCombosData();
        updateJTable();
        updateDepartmentsCombo();
        updateCourseTypesCombo();
        updateCertificationsCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCourses = new javax.swing.JTable();
        jComboBoxDepartment = new javax.swing.JComboBox<>();
        jComboBoxCourseType = new javax.swing.JComboBox<>();
        jTextFieldCourseCode = new javax.swing.JTextField();
        jTextFieldName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jComboBoxCertification = new javax.swing.JComboBox<>();
        jButtonAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Department", "Type", "Code", "Name", "Description", "Certification"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCourses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCoursesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCourses);

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setRows(5);
        jScrollPane2.setViewportView(jTextAreaDescription);

        jButtonAdd.setText("Add >>");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel1.setText("Courses");

        jTextFieldID.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBoxDepartment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldCourseCode)
                        .addComponent(jComboBoxCourseType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCertification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGap(496, 496, 496)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxCourseType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxCertification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButtonAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        Course course = new Course();
        
        Department department = (Department)jComboBoxDepartment.getSelectedItem();
        CourseType courseType = (CourseType)jComboBoxCourseType.getSelectedItem();
        
        Integer departmentId = department.getDepartmentId();
        Integer courseTypeId = courseType.getCourseTypeId();
        String courseCode = jTextFieldCourseCode.getText();
        String courseName = jTextFieldName.getText();
        String courseDescription = jTextAreaDescription.getText();
        Integer certification = Integer.parseInt(jComboBoxCertification.getSelectedItem().toString());
        
        // TODO Validations
        
        course.setDepartmentId(departmentId);
        course.setCourseTypeId(courseTypeId);
        course.setCode(courseCode);
        course.setName(courseName);
        course.setDescription(courseDescription);
        course.setCertification(certification);
        
        courseService.insertCourse(course);
        
        populateCoursesData();
        updateJTable();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableCoursesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCoursesMouseClicked
        // Double click
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            DefaultTableModel tableModel = (DefaultTableModel)jTableCourses.getModel();
            int index = jTableCourses.getSelectedRow();
            
            Course course = courses.get(index);
            
            // Set fields
            jTextFieldID.setText(course.getCourseId().toString());
            
            jTextAreaDescription.setText(course.getDescription());
            
            jTextFieldCourseCode.setText(course.getCode());
            
            jTextFieldName.setText(course.getName());
            
            Optional<Department> department = departments.stream().filter(d -> d.getDepartmentId().equals(course.getDepartmentId())).findFirst();
            jComboBoxDepartment.setSelectedItem(department.get());
            
            Optional<CourseType> courseType = courseTypes.stream().filter(ct -> ct.getCourseTypeId().equals(course.getCourseTypeId())).findFirst();
            jComboBoxCourseType.setSelectedItem(courseType.get());
            
            Optional<Integer> certification = certifications.stream().filter(ct -> ct.equals(course.getCertification())).findFirst();
            jComboBoxCertification.setSelectedItem(certification.get());
            
            jTextAreaDescription.setText(tableModel.getValueAt(index, 2).toString());
            //setEditDeleteMode();
        }
    }//GEN-LAST:event_jTableCoursesMouseClicked

    private void cleanInputs() {
        jTextFieldID.setText("");
        jTextFieldCourseCode.setText("");
        jTextFieldName.setText("");
        jTextAreaDescription.setText("");
        jComboBoxCertification.setSelectedIndex(0);
        jComboBoxCourseType.setSelectedIndex(0);
        jComboBoxDepartment.setSelectedIndex(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JComboBox<Integer> jComboBoxCertification;
    private javax.swing.JComboBox<CourseType> jComboBoxCourseType;
    private javax.swing.JComboBox<Department> jComboBoxDepartment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCourses;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldCourseCode;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables

    private void initBeans() {
        this.courseService = ctx.getBean(CourseServiceImpl.class);
        this.departmentService = ctx.getBean(DepartmentServiceImpl.class);
        this.courseTypeService = ctx.getBean(CourseTypeServiceImpl.class);
    }

    private void populateCoursesData() {
        log.info("Getting courses from db...");
        courses = courseService.getAllCourses();       
    }
    
    private void populateCombosData() {
        log.info("Getting departments from db...");
        departments = departmentService.getDepartments();
        
        log.info("Getting course types from db...");
        courseTypes = courseTypeService.getCourseTypes();
        
        certifications = Arrays.asList(
                Integer.valueOf(5),
                Integer.valueOf(6)
        );
    }

    private void updateJTable() {
        log.info("Updating JTable with data " + courses);
        DefaultTableModel tableModel = (DefaultTableModel) jTableCourses.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        // Populate table
        for (Course course : courses) {
            Vector row = new Vector();
            row.add(course.getCourseId());
            row.add(course.getDepartmentName());
            row.add(course.getCourseTypeName());
            row.add(course.getCode());
            row.add(course.getName());
            row.add(course.getDescription());
            row.add(course.getCertification());
            tableModel.addRow(row);
        }
        
    }

    private void updateDepartmentsCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxDepartment.getModel();
        cbModel.addElement(new Department("Select one...", -1));
        cbModel.addAll(departments);
    }

    private void updateCourseTypesCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxCourseType.getModel();
        cbModel.addElement(new CourseType(-1, "Select one..."));
        cbModel.addAll(courseTypes);
    }
    
    private void updateCertificationsCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxCertification.getModel();
        cbModel.addAll(certifications);
    }
    
    
}
