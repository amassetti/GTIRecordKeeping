/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.teacher;

import edu.gti.asd.ariel.recordkeeping.model.Course;
import edu.gti.asd.ariel.recordkeeping.model.Grade;
import edu.gti.asd.ariel.recordkeeping.model.IComboElement;
import edu.gti.asd.ariel.recordkeeping.model.Student;
import edu.gti.asd.ariel.recordkeeping.model.Subject;
import edu.gti.asd.ariel.recordkeeping.model.User;
import edu.gti.asd.ariel.recordkeeping.service.CourseService;
import edu.gti.asd.ariel.recordkeeping.service.GradeService;
import edu.gti.asd.ariel.recordkeeping.service.StudentService;
import edu.gti.asd.ariel.recordkeeping.service.SubjectService;
import edu.gti.asd.ariel.recordkeeping.utils.ContextManager;
import edu.gti.asd.ariel.recordkeeping.utils.FieldsUtils;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ariel
 */
public class GTIRegisterSubjectGradesForm extends javax.swing.JFrame {
    private ContextManager contextManager;
    private User user;
    
    private CourseService courseService;
    private SubjectService subjectService;
    private StudentService studentService;
    private GradeService gradeService;
    
    private List<Student> students;
    private List<Course> coursesByTeacher;
    private List<Subject> subjectsByCourseAndTeacher;
    
    private Course selectedCourse;
    private Subject selectedSubject;

    /**
     * Creates new form GTIRegisterStudentInCourseForm
     */
    public GTIRegisterSubjectGradesForm(ContextManager contextManager, User user) {
        initComponents();
        this.contextManager = contextManager;
        this.user = user;
        initBeans();
        fetchDataFromDB();
        populateCoursesCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxSubject = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableStudents = new javax.swing.JTable();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        jButtonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Select Course:");

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel3.setText("Register Grades for all students in a Subject");

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Subject:");

        jComboBoxSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSubjectActionPerformed(evt);
            }
        });

        jTableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Assesment 1", "Assesment 2", "Assesment 3", "Final Exam"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableStudentsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableStudents);

        jComboBoxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCourseActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(580, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(400, 400, 400))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonSave)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonExit)))
                        .addGap(34, 34, 34))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonSave))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jTableStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableStudentsMouseClicked
    }//GEN-LAST:event_jTableStudentsMouseClicked

    private void jComboBoxSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSubjectActionPerformed
        IComboElement selectedSubject = (IComboElement)jComboBoxSubject.getSelectedItem();
        
        if (selectedSubject != null && !Integer.valueOf(-1).equals(selectedSubject.getComboElementId())) {

            // TODO: Get grades
            Integer subjectId = selectedSubject.getComboElementId();
            
            List<Grade> grades = gradeService.getAllGradesForSubject(subjectId);

            
        }
    }//GEN-LAST:event_jComboBoxSubjectActionPerformed

    private void jComboBoxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCourseActionPerformed
        IComboElement selectedCourse = (IComboElement)jComboBoxCourse.getSelectedItem();
        if (selectedCourse != null && !selectedCourse.getComboElementId().equals(-1)) {
            subjectsByCourseAndTeacher = subjectService.getSubjectsByCourseAndTeacher(selectedCourse.getComboElementId(), user.getTeacherId());
            populateSubjectsCombo();
        }
        
    }//GEN-LAST:event_jComboBoxCourseActionPerformed

    private void fetchDataForSubjectsCombo() {
        Integer teacherId = user.getTeacherId();
        if (teacherId == null) {
            JOptionPane.showMessageDialog(this, "User has no teacher asociated. Please contact the admin");
            return;
        }
        subjectsByCourseAndTeacher = subjectService.getSubjectsByCourseAndTeacher(selectedCourse.getCourseId(), teacherId);
    }
    
    private void populateSubjectsCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxSubject.getModel();
        cbModel.removeAllElements();
        cbModel.addElement(new Subject(-1, "Select a subject...", ""));
        cbModel.addAll(subjectsByCourseAndTeacher);                
        
    }
    
    private void initBeans() {
        this.courseService =  contextManager.getBean(CourseService.class);
        this.studentService = contextManager.getBean(StudentService.class);
        this.subjectService = contextManager.getBean(SubjectService.class);
        this.gradeService = contextManager.getBean(GradeService.class);
    }

    private void fetchDataFromDB() {
        this.coursesByTeacher = courseService.getCoursesByTeacherId(user.getTeacherId());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox<IComboElement> jComboBoxCourse;
    private javax.swing.JComboBox<IComboElement> jComboBoxSubject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableStudents;
    // End of variables declaration//GEN-END:variables

    private void populateStudentsTable() {
        DefaultTableModel tableModel = (DefaultTableModel)jTableStudents.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        for (Student student : students) {
            Vector row = new Vector();
            row.add(student.getStudentId());
            row.add(student.getLastName() + ", " + student.getFirstName());
            row.add(0);
            row.add(0);
            row.add(0);
            row.add(0);
            
            tableModel.addRow(row);
        }
        
    }

    private void emptySubjectsCombo() {
        jComboBoxSubject.removeAllItems();
        jComboBoxSubject.addItem(new Subject(-1, "Select a subject...", ""));
        
    }

    private void populateCoursesCombo() {
        jComboBoxCourse.addItem(new Course(-1, "Select one course..."));
        for (Course course : coursesByTeacher) {
            jComboBoxCourse.addItem(course);
        }
        
    }


}
