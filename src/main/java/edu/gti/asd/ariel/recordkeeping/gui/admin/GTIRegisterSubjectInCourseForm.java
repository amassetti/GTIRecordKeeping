/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.admin;

import edu.gti.asd.ariel.recordkeeping.model.Course;
import edu.gti.asd.ariel.recordkeeping.model.IComboElement;
import edu.gti.asd.ariel.recordkeeping.model.Subject;
import edu.gti.asd.ariel.recordkeeping.service.CourseService;
import edu.gti.asd.ariel.recordkeeping.service.SubjectService;
import edu.gti.asd.ariel.recordkeeping.utils.ContextManager;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ariel
 */
public class GTIRegisterSubjectInCourseForm extends javax.swing.JFrame {
    private ContextManager contextManager;
    
    private CourseService courseService;
    private SubjectService subjectService;
    
    private List<Subject> subjects;
    private List<Subject> subjectsByCourse;
    private List<Course> courses;
    
    private Course selectedCourse;

    /**
     * Creates new form GTIRegisterSubjectInCourseForm
     */
    public GTIRegisterSubjectInCourseForm(ContextManager contextManager) {
        initComponents();
        this.contextManager = contextManager;
        initBeans();
        fetchDataFromDB();
        populateSubjectsTable();
        populateCoursesCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSubjectsByCourse = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSubjects = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldFilter = new javax.swing.JTextField();
        jComboBoxCourse = new javax.swing.JComboBox<>();
        jButtonSearchSubject = new javax.swing.JButton();
        jButtonRegisterSubject = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldSelectedCourse = new javax.swing.JTextField();
        jButtonClearFilter = new javax.swing.JButton();
        jButtonUnRegister = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableSubjectsByCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject code", "Subject name", "NFQ Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableSubjectsByCourse);

        jTableSubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Subject Name", "NFQ Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableSubjects);

        jLabel1.setText("Select Course:");

        jLabel2.setText("Filter Subject:");

        jComboBoxCourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCourseItemStateChanged(evt);
            }
        });

        jButtonSearchSubject.setText("Search");
        jButtonSearchSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchSubjectActionPerformed(evt);
            }
        });

        jButtonRegisterSubject.setText(">>>");
        jButtonRegisterSubject.setToolTipText("Register");
        jButtonRegisterSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterSubjectActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel3.setText("Register Subject in Course");

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel4.setText("Selected Course:");

        jTextFieldSelectedCourse.setEditable(false);

        jButtonClearFilter.setText("Clear");
        jButtonClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearFilterActionPerformed(evt);
            }
        });

        jButtonUnRegister.setText("<<<");
        jButtonUnRegister.setToolTipText("Unregister");
        jButtonUnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(21, 21, 21)
                                .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSearchSubject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonClearFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(478, 478, 478))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonRegisterSubject)
                                    .addComponent(jButtonUnRegister))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBoxCourse, 0, 567, Short.MAX_VALUE)
                                            .addComponent(jTextFieldSelectedCourse)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBoxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldSelectedCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSearchSubject)
                            .addComponent(jButtonClearFilter))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jButtonRegisterSubject)
                                .addGap(44, 44, 44)
                                .addComponent(jButtonUnRegister)))))
                .addGap(27, 27, 27)
                .addComponent(jButtonExit)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jComboBoxCourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCourseItemStateChanged
        Course course = (Course) evt.getItem();
        if (!selectedCourse.getCourseId().equals(course.getCourseId())) {
            selectedCourse = course;
            
            if (course.getCourseId().equals(-1)) {
                jTextFieldSelectedCourse.setText("");
            } else {
                jTextFieldSelectedCourse.setText(course.getName());
                searchSubjectsByCourse();
            }
            
        }
        
    }//GEN-LAST:event_jComboBoxCourseItemStateChanged

    private void searchSubjectsByCourse() {
        // search subjects by course
        subjectsByCourse = subjectService.getSubjectsByCourse(selectedCourse.getCourseId());
        populateSubjectsByCourseTable();
    }
    
    private void jButtonSearchSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchSubjectActionPerformed
        searchSubjects();
    }//GEN-LAST:event_jButtonSearchSubjectActionPerformed

    private void searchSubjects() {
        String filter = jTextFieldFilter.getText();
        subjects = subjectService.searchSubjects(filter);
        populateSubjectsTable();
    }
    
    private void jButtonClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearFilterActionPerformed
        jTextFieldFilter.setText("");
        subjects = subjectService.getAllSubjects();
        populateSubjectsTable();
    }//GEN-LAST:event_jButtonClearFilterActionPerformed

    private void jButtonRegisterSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterSubjectActionPerformed
        int[] selectedRows = jTableSubjects.getSelectedRows();
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Must select one or more subjects to register in course");
            return;
        }
        
        Integer courseId = selectedCourse.getCourseId();
        if (courseId.equals(-1)) {
            JOptionPane.showMessageDialog(this, "Must select a course to register the subjects into.");
        } else {
            List<Subject> subjectsToAdd = new ArrayList();
            for (int i : selectedRows) {
                Subject subjectToAdd = subjects.get(i);
                subjectsToAdd.add(subjectToAdd);
            }
            
            subjectService.registerSubjectsInCourse(subjectsToAdd, courseId);
            
            searchSubjects();
            searchSubjectsByCourse();
        
        }
    }//GEN-LAST:event_jButtonRegisterSubjectActionPerformed

    private void jButtonUnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnRegisterActionPerformed
        int[] selectedRows = jTableSubjectsByCourse.getSelectedRows();
        
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Must select one or more subjects to un register");
            return;
        }
        
        List<Subject> subjectsToUnregister = new ArrayList();
        for (int i : selectedRows) {
            Subject subject = subjectsByCourse.get(i);
            subjectsToUnregister.add(subject);
        }
        
        Integer courseId = selectedCourse.getCourseId();
        subjectService.unregisterSubjectsFromCourse(subjectsToUnregister, courseId);
        
        searchSubjects();
        searchSubjectsByCourse();
        
    }//GEN-LAST:event_jButtonUnRegisterActionPerformed

    private void initBeans() {
        this.subjectService = contextManager.getBean("subjectService", SubjectService.class);
        this.courseService = contextManager.getBean("courseService", CourseService.class);
    }

    private void fetchDataFromDB() {
        this.subjects = subjectService.getAllSubjects();
        this.courses = courseService.getAllCourses();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearFilter;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonRegisterSubject;
    private javax.swing.JButton jButtonSearchSubject;
    private javax.swing.JButton jButtonUnRegister;
    private javax.swing.JComboBox<IComboElement> jComboBoxCourse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableSubjects;
    private javax.swing.JTable jTableSubjectsByCourse;
    private javax.swing.JTextField jTextFieldFilter;
    private javax.swing.JTextField jTextFieldSelectedCourse;
    // End of variables declaration//GEN-END:variables

    private void populateSubjectsTable() {
        DefaultTableModel tableModel = (DefaultTableModel)jTableSubjects.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        for (Subject subject : subjects) {
            Vector row = new Vector();
            row.add(subject.getSubjectCode());
            row.add(subject.getSubjectName());
            row.add(subject.getNfqLevel());
            tableModel.addRow(row);
        }
        
    }

    private void populateCoursesCombo() {
        selectedCourse = new Course(-1, "Select course...");
        jComboBoxCourse.addItem(selectedCourse);
        for (Course course : courses) {
            jComboBoxCourse.addItem(course);
        }
    }

    private void populateSubjectsByCourseTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTableSubjectsByCourse.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        for (Subject subjectByCourse : subjectsByCourse) {
            Vector row = new Vector();
            row.add(subjectByCourse.getSubjectCode());
            row.add(subjectByCourse.getSubjectName());
            row.add(subjectByCourse.getNfqLevel());
            tableModel.addRow(row);
        }
        
    }
}
