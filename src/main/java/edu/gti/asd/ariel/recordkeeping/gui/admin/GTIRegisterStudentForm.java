/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.admin;

import edu.gti.asd.ariel.recordkeeping.model.Address;
import edu.gti.asd.ariel.recordkeeping.model.City;
import edu.gti.asd.ariel.recordkeeping.model.Gender;
import edu.gti.asd.ariel.recordkeeping.model.IComboElement;
import edu.gti.asd.ariel.recordkeeping.model.Student;
import edu.gti.asd.ariel.recordkeeping.service.CityService;
import edu.gti.asd.ariel.recordkeeping.service.GenderService;
import edu.gti.asd.ariel.recordkeeping.service.StudentService;
import edu.gti.asd.ariel.recordkeeping.utils.ContextManager;
import edu.gti.asd.ariel.recordkeeping.utils.FieldsUtils;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ariel
 */
public class GTIRegisterStudentForm extends javax.swing.JFrame {
    
    static Logger log = Logger.getLogger(GTIRegisterStudentForm.class.getName());
    
    private ContextManager contextManager;
    private StudentService studentService;
    private CityService cityService;
    private GenderService genderService;
    
    private List<Student> students;
    private List<City> cities;
    private List<Gender> genders;
    
    private Student selectedStudent;
    

    /**
     * Creates new form GTIRegisterStudentForm
     */
    public GTIRegisterStudentForm(ContextManager contextManager) {
        initComponents();
        this.contextManager = contextManager;
        initBeans();
        populateStudentsData();
        populateCombosData();
        updateStudentsJTable();
        updateCitiesCombo();
        updateGendersCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelAddress = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldAddressLine1 = new javax.swing.JTextField();
        jTextFieldAddressLine2 = new javax.swing.JTextField();
        jComboBoxCity = new javax.swing.JComboBox<>();
        jTextFieldEirCode = new javax.swing.JTextField();
        jPanelStudent = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPpsn = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxGender = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldFirstName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldLastName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStudents = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldFilter = new javax.swing.JTextField();
        jButtonFilter = new javax.swing.JButton();
        jButtonClearFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelAddress.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));

        jLabel6.setText("Line 1:");

        jLabel7.setText("Line 2:");

        jLabel9.setText("City:");

        jLabel10.setText("Eir Code:");

        javax.swing.GroupLayout jPanelAddressLayout = new javax.swing.GroupLayout(jPanelAddress);
        jPanelAddress.setLayout(jPanelAddressLayout);
        jPanelAddressLayout.setHorizontalGroup(
            jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAddressLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelAddressLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldEirCode))
                    .addGroup(jPanelAddressLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAddressLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAddressLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(30, 30, 30)
                        .addComponent(jComboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanelAddressLayout.setVerticalGroup(
            jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAddressLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldEirCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanelStudent.setBorder(javax.swing.BorderFactory.createTitledBorder("Student"));

        jLabel4.setText("PPSN:");

        jLabel5.setText("Gender:");

        jLabel1.setText("First Name:");

        jLabel2.setText("Last Name:");

        jLabel3.setText("Email:");

        jLabel8.setText("ID:");

        jTextFieldID.setEditable(false);

        javax.swing.GroupLayout jPanelStudentLayout = new javax.swing.GroupLayout(jPanelStudent);
        jPanelStudent.setLayout(jPanelStudentLayout);
        jPanelStudentLayout.setHorizontalGroup(
            jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStudentLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelStudentLayout.createSequentialGroup()
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelStudentLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudentLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(36, 36, 36)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudentLayout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(33, 33, 33)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudentLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(27, 27, 27)))
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldEmail)
                            .addComponent(jTextFieldPpsn)
                            .addComponent(jComboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelStudentLayout.createSequentialGroup()
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanelStudentLayout.setVerticalGroup(
            jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStudentLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldPpsn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Email", "PPSN", "Gender", "Address", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableStudents);

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonUpdate.setText("Update");
        jButtonUpdate.setEnabled(false);
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jLabel11.setText("Filter:");

        jButtonFilter.setText("Filter");
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });

        jButtonClearFilter.setText("Clear");
        jButtonClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonExit)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonClearFilter)
                                .addGap(370, 370, 370))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jPanelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAdd)
                            .addComponent(jButtonDelete)
                            .addComponent(jButtonUpdate))))
                .addGap(124, 124, 124))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelete)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFilter)
                    .addComponent(jButtonClearFilter))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButtonExit)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // Get and validate data from form
        String firstName = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldFirstName, "first name");
        if (firstName.length() == 0) return;
        
        String lastName = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldLastName, "last name");
        if (lastName.length() == 0) return;
        
        String email = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldEmail, "email");
        if (email.length() == 0) return;
        
        String ppsn = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldPpsn, "ppsn");
        if (ppsn.length() == 0) return;
        
        Integer genderId = FieldsUtils.getMandatoryIdFromCombo(this, jComboBoxGender, "gender");
        if (genderId.equals(-1)) return;

        String addressLine1 = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldAddressLine1, "address line 1");
        if (addressLine1.length() == 0) return;
        
        String addressLine2 = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldAddressLine2, "address line 2");
        if (addressLine2.length() == 0) return;
        
        Integer cityId = FieldsUtils.getMandatoryIdFromCombo(this, jComboBoxCity, "city");
        if (cityId.equals(-1)) return;
        
        String eirCode = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldEirCode, "eir code");
        if (eirCode.length() == 0) return;
        
        Student student = new Student();
        student.setFirstName(firstName);
        student.setLastName(lastName);
        student.setEmail(email);
        student.setPpsn(ppsn);
        student.setGenderId(genderId);
        
        Address address = new Address();
        address.setAddressLine1(addressLine1);
        address.setAddressLine2(addressLine2);
        address.setCityId(cityId);
        address.setEirCode(eirCode);
        student.setAddress(address);
        
        try {
            studentService.insertStudent(student);
        } catch (IllegalAccessException ex) {
            log.info("Error: " + ex.getMessage());
        }
        
        clearFields();
        populateStudentsData();
        updateStudentsJTable();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jTableStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableStudentsMouseClicked
        // Double click
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            DefaultTableModel tableModel = (DefaultTableModel)jTableStudents.getModel();
            int index = jTableStudents.getSelectedRow();
            
            Student student = students.get(index);
            selectedStudent = student;
            
            // Set fields
            jTextFieldID.setText(student.getStudentId().toString());
            jTextFieldFirstName.setText(student.getFirstName());
            jTextFieldLastName.setText(student.getLastName());
            jTextFieldEmail.setText(student.getEmail());
            jTextFieldPpsn.setText(student.getPpsn());
            
            Optional<Gender> gender = genders.stream().filter(g -> g.getGenderId().equals(student.getGenderId())).findFirst();
            jComboBoxGender.setSelectedItem(gender.get());
            
            Address address = student.getAddress();
            jTextFieldAddressLine1.setText(address.getAddressLine1());
            jTextFieldAddressLine2.setText(address.getAddressLine2());
            jTextFieldEirCode.setText(address.getEirCode());
            
            Optional<City> city = cities.stream().filter(c -> c.getCityId().equals(address.getCityId())).findFirst();
            jComboBoxCity.setSelectedItem(city.get());
                        
            setEditDeleteMode();
            
        }
    }//GEN-LAST:event_jTableStudentsMouseClicked

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // Get and validate data from form
        Integer studentId = Integer.valueOf(jTextFieldID.getText());
        
        String firstName = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldFirstName, "first name");
        if (firstName.length() == 0) return;
        
        String lastName = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldLastName, "last name");
        if (lastName.length() == 0) return;
        
        String email = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldEmail, "email");
        if (email.length() == 0) return;
        
        String ppsn = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldPpsn, "ppsn");
        if (ppsn.length() == 0) return;
        
        Integer genderId = FieldsUtils.getMandatoryIdFromCombo(this, jComboBoxGender, "gender");
        if (genderId.equals(-1)) return;

        String addressLine1 = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldAddressLine1, "address line 1");
        if (addressLine1.length() == 0) return;
        
        String addressLine2 = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldAddressLine2, "address line 2");
        if (addressLine2.length() == 0) return;
        
        Integer cityId = FieldsUtils.getMandatoryIdFromCombo(this, jComboBoxCity, "city");
        if (cityId.equals(-1)) return;
        
        String eirCode = FieldsUtils.getMandatoryValueFromTextField(this, jTextFieldEirCode, "eir code");
        if (eirCode.length() == 0) return;
        
        //Student student = new Student();
        selectedStudent.setFirstName(firstName);
        selectedStudent.setLastName(lastName);
        selectedStudent.setEmail(email);
        selectedStudent.setPpsn(ppsn);
        selectedStudent.setGenderId(genderId);
        
        Address address = selectedStudent.getAddress();
        address.setAddressLine1(addressLine1);
        address.setAddressLine2(addressLine2);
        address.setCityId(cityId);
        address.setEirCode(eirCode);
        selectedStudent.setAddress(address);
        
        studentService.updateStudent(selectedStudent);
        setAddMode();
        clearFields();
        populateStudentsData();
        updateStudentsJTable();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        Integer studentId = Integer.valueOf(jTextFieldID.getText());
        
        if (selectedStudent != null && selectedStudent.getStudentId().equals(studentId)) {
            
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete student " + selectedStudent.getLastName(), "Delete Student", 0);
       
            if (option == JOptionPane.YES_OPTION) {
                studentService.deleteStudent(selectedStudent);
                setAddMode();
                clearFields();
                populateStudentsData();
                updateStudentsJTable();
            }
            
        } else {
            log.info("Error deleting student...");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed
        String filter = jTextFieldFilter.getText();
        if (!filter.trim().isEmpty()) {
            students = studentService.searchStudents(filter);
            updateStudentsJTable();
        }
    }//GEN-LAST:event_jButtonFilterActionPerformed

    private void jButtonClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearFilterActionPerformed
        jTextFieldFilter.setText("");
        populateStudentsData();
        updateStudentsJTable();
    }//GEN-LAST:event_jButtonClearFilterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonClearFilter;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<IComboElement> jComboBoxCity;
    private javax.swing.JComboBox<IComboElement> jComboBoxGender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelAddress;
    private javax.swing.JPanel jPanelStudent;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableStudents;
    private javax.swing.JTextField jTextFieldAddressLine1;
    private javax.swing.JTextField jTextFieldAddressLine2;
    private javax.swing.JTextField jTextFieldEirCode;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldFilter;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldPpsn;
    // End of variables declaration//GEN-END:variables

    private void initBeans() {
        this.cityService = contextManager.getBean(CityService.class);
        this.genderService = contextManager.getBean(GenderService.class);
        this.studentService = contextManager.getBean(StudentService.class);
    }

    private void populateStudentsData() {
        students = studentService.getStudents();
    }

    private void populateCombosData() {
        cities = cityService.getCities();
        genders = genderService.getGenders();
    }

    private void updateCitiesCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxCity.getModel();
        cbModel.addElement(new City(-1, "Select one..."));
        cbModel.addAll(cities);
    }
    
    private void updateGendersCombo() {
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel) jComboBoxGender.getModel();
        cbModel.addElement(new Gender(-1, "Select one..."));
        cbModel.addAll(genders);
    }

    private void updateStudentsJTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTableStudents.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        // Populate table
        for (Student student : students) {
            Vector row = new Vector();
            row.add(student.getStudentId());
            row.add(student.getFirstName());
            row.add(student.getLastName());
            row.add(student.getEmail());
            row.add(student.getPpsn());
            row.add(student.getGender());
            
            // address
            Address address = student.getAddress();
            if (address != null) {
                row.add(address.getAddressLine1());
                row.add(address.getCity());
            } else {
                row.add("N/A");
                row.add("N/A");
            }

            tableModel.addRow(row);
        }

    }

    private void clearFields() {
        jTextFieldID.setText("");
        jTextFieldFirstName.setText("");
        jTextFieldLastName.setText("");
        jTextFieldEmail.setText("");
        jTextFieldPpsn.setText("");
        jComboBoxGender.setSelectedIndex(0);

        jTextFieldAddressLine1.setText("");
        jTextFieldAddressLine2.setText("");
        jComboBoxCity.setSelectedIndex(0);
        jTextFieldEirCode.setText("");
        selectedStudent = null;
    }

    private void setAddMode() {
        jButtonAdd.setEnabled(true);
        jButtonUpdate.setEnabled(false);
        jButtonDelete.setEnabled(false);
    }
    
    private void setEditDeleteMode() {
        jButtonAdd.setEnabled(false);
        jButtonUpdate.setEnabled(true);
        jButtonDelete.setEnabled(true);
    }
}
