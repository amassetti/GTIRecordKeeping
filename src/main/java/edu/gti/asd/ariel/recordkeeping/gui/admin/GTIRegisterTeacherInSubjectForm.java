/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.gti.asd.ariel.recordkeeping.gui.admin;

import edu.gti.asd.ariel.recordkeeping.model.IComboElement;
import edu.gti.asd.ariel.recordkeeping.model.Subject;
import edu.gti.asd.ariel.recordkeeping.model.Teacher;
import edu.gti.asd.ariel.recordkeeping.service.SubjectService;
import edu.gti.asd.ariel.recordkeeping.service.TeacherService;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author ariel
 */
public class GTIRegisterTeacherInSubjectForm extends javax.swing.JFrame {
    private ClassPathXmlApplicationContext ctx;

    private TeacherService teacherService;
    private SubjectService subjectService;
    
    private List<Subject> subjects;
    private List<Teacher> teachers;
    
    private List<Teacher> teachersBySubject;
    
    private Subject selectedSubject;

    /**
     * Creates new form GTIRegisterTeacherInSubject
     */
    public GTIRegisterTeacherInSubjectForm(ClassPathXmlApplicationContext ctx) {
        initComponents();
        this.ctx = ctx;
        initBeans();
        fetchDataFromDB();
        populateSubjectsTable();
        populateTeachersCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTeachersBySubject = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSubjects = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldFilter = new javax.swing.JTextField();
        jComboBoxTeacher = new javax.swing.JComboBox<>();
        jButtonSearchSubject = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldSelectedSubject = new javax.swing.JTextField();
        jButtonClearFilter = new javax.swing.JButton();
        jButtonAddTeacher = new javax.swing.JButton();
        jButtonUnregister = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jTableTeachersBySubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teacher ID", "First Name", "Last Name", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableTeachersBySubject);

        jTableSubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Subject Name", "NFQ Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSubjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSubjectsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableSubjects);

        jLabel1.setText("Select Teacher:");

        jLabel2.setText("Filter Subject:");

        jComboBoxTeacher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTeacherItemStateChanged(evt);
            }
        });

        jButtonSearchSubject.setText("Search");
        jButtonSearchSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchSubjectActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel3.setText("Assign a Teacher to a Subject");

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabel4.setText("Selected Subject:");

        jTextFieldSelectedSubject.setEditable(false);

        jButtonClearFilter.setText("Clear");
        jButtonClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearFilterActionPerformed(evt);
            }
        });

        jButtonAddTeacher.setText("Add");
        jButtonAddTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddTeacherActionPerformed(evt);
            }
        });

        jButtonUnregister.setText("<<<");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(21, 21, 21)
                                .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSearchSubject)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonClearFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(478, 478, 478))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonUnregister)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jComboBoxTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButtonAddTeacher)
                                                .addGap(22, 22, 22))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldSelectedSubject)
                                                .addGap(13, 13, 13))))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAddTeacher))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldSelectedSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButtonUnregister)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jTextFieldFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonSearchSubject)
                                .addComponent(jButtonClearFilter))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addComponent(jButtonExit)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jComboBoxTeacherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxTeacherItemStateChanged
    }//GEN-LAST:event_jComboBoxTeacherItemStateChanged

    private void searchTeachersBySubject() {
        // search teachers by subject
        if (selectedSubject != null) {
            teachersBySubject = teacherService.searchTeachersBySubject(selectedSubject.getSubjectId());
            populateTeachersBySubjectTable();
        }

    }
    
    private void jButtonSearchSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchSubjectActionPerformed
        searchSubjects();
    }//GEN-LAST:event_jButtonSearchSubjectActionPerformed

    private void searchSubjects() {
        String filter = jTextFieldFilter.getText();
        subjects = subjectService.searchSubjects(filter);
        populateSubjectsTable();
    }
    
    private void jButtonClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearFilterActionPerformed
        jTextFieldFilter.setText("");
        subjects = subjectService.getAllSubjects();
        populateSubjectsTable();
    }//GEN-LAST:event_jButtonClearFilterActionPerformed

    private void jTableSubjectsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSubjectsMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            int index = jTableSubjects.getSelectedRow();
            selectedSubject = subjects.get(index);
            jTextFieldSelectedSubject.setText(selectedSubject.getSubjectCodeAndName());
            searchTeachersBySubject();
        }
        
    }//GEN-LAST:event_jTableSubjectsMouseClicked

    private void jButtonAddTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddTeacherActionPerformed
        Teacher selectedTeacher = (Teacher)jComboBoxTeacher.getSelectedItem();
        Integer teacherId = selectedTeacher.getTeacherId();
        Integer subjectId = (selectedSubject != null) ? selectedSubject.getSubjectId() : null;
        
        if (teacherId.equals(-1)) {
            JOptionPane.showMessageDialog(this, "Must select a teacher");
            return;
        }
        
        if (subjectId == null) {
            JOptionPane.showMessageDialog(this, "Must select a subject");
            return;
        }
        
        teacherService.registerTeacherInSubject(teacherId, subjectId);
        
        searchTeachersBySubject();
        
    }//GEN-LAST:event_jButtonAddTeacherActionPerformed

    private void initBeans() {
        this.subjectService = (SubjectService) ctx.getBean("subjectService");
        this.teacherService = (TeacherService) ctx.getBean("teacherService");
    }

    private void fetchDataFromDB() {
        this.subjects = subjectService.getAllSubjects();
        this.teachers = teacherService.getTeachers();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddTeacher;
    private javax.swing.JButton jButtonClearFilter;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonSearchSubject;
    private javax.swing.JButton jButtonUnregister;
    private javax.swing.JComboBox<IComboElement> jComboBoxTeacher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableSubjects;
    private javax.swing.JTable jTableTeachersBySubject;
    private javax.swing.JTextField jTextFieldFilter;
    private javax.swing.JTextField jTextFieldSelectedSubject;
    // End of variables declaration//GEN-END:variables

    private void populateSubjectsTable() {
        DefaultTableModel tableModel = (DefaultTableModel)jTableSubjects.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        for (Subject subject : subjects) {
            Vector row = new Vector();
            row.add(subject.getSubjectCode());
            row.add(subject.getSubjectName());
            row.add(subject.getNfqLevel());
            tableModel.addRow(row);
        }
        
    }

    private void populateTeachersCombo() {        
        jComboBoxTeacher.addItem(new Teacher(-1, "Select teacher", "Please"));
        for (Teacher teacher : teachers) {
            jComboBoxTeacher.addItem(teacher);
        }
    }

    private void populateTeachersBySubjectTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTableTeachersBySubject.getModel();
        
        // Clean table
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        
        for (Teacher teacher : teachersBySubject) {
            Vector row = new Vector();
            row.add(teacher.getTeacherId());
            row.add(teacher.getFirstName());
            row.add(teacher.getLastName());
            row.add(teacher.getEmail());
            tableModel.addRow(row);
        }
        
    }


}
